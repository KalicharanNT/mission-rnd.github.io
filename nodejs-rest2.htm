<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:105%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:105%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;
	font-weight:normal;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
.MsoChpDefault
	{font-size:10.0pt;
	font-family:"Calibri",sans-serif;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-IN link="#0563C1" vlink="#954F72">

<div class=WordSection1>

<p class=MsoTitle align=center style='text-align:center'>NodeJS RESTful
Services.</p>

<h1>Overview</h1>

<p class=MsoNormal>You will learn how to develop RESTful services using node.js
and MySQL.</p>

<h1>PreRequisites</h1>

<p class=MsoNormal>nodejs 101 (File Persistence) and nodejs 102 (MySQL Db
Persistence).</p>

<h1>Http Concepts</h1>

<p class=MsoNormal>Http stands for HyperText Transfer Protocol. </p>

<p class=MsoNormal>Hypertext is generally defined as any block of content or
text that includes hyperlinks to other documents, images, or multimedia content
as shown in the example below:</p>

<p class=MsoNormal>&lt;p&gt;This html para is an example of hypertext. It is
generally defined as any block of content or text that includes &lt;a
href=&quot;wikipedia.com/hyperlinks”&gt;hyperlinks&lt;/a&gt; to other &lt;a
href=&quot;wikipedia.com/documents&quot;&gt;documents&lt;/a&gt;, images, or
multimedia content.&lt;/p&gt; </p>

<p class=MsoNormal>HTTP is a protocol for sending and receiving hypertext.</p>

<p class=MsoNormal>It was Invented by Tim Berners Lee in 1989. First version of
HTTP had only GET method that would request a html page from server.</p>

<h2>Principles of Http Services</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Request/Response based - Client sends a Http request and gets
back a response from the Server</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Both request/response have headers that indicate additional info
about request/response.</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any type of data can be sent over Http (html pages, images, blobs
etc).</p>

<h2>Http Methods/Operations</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>CONNECT - Connects to the server</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>GET - GET method is used to retrieve info from server for the
given URL</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>POST - A POST request is used to send data to the server, for
example, customer information, file upload, etc. using HTML forms. This is
equivalent to CREATE operation.</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>PUT -  Replaces all current representations of the target
resource with the uploaded content. This is equivalent to UPDATE operation.</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>DELETE - Removes all current representations of the target
resource given by a URI.</p>

<h2>Sample Http Request</h2>

<p class=MsoNormal><img width=640 height=360 id="Picture 1"
src="nodejs-rest2_files/image001.png"></p>

<h2>Sample Http Response</h2>

<p class=MsoNormal><img width=640 height=360 id="Picture 2"
src="nodejs-rest2_files/image002.png"></p>

<p class=MsoNormal>&nbsp;</p>

<h2>Http Content Types</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Content can be of any type (text, html, xml, json, image, binary
etc)</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Content-Type header indicates the type of content.</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Common Types</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Application/xml - XML documents</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Application/json - JSON document</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Image - For images.</p>

<h2>Http Status Codes</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Http Status codes</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>See <a
href="http://www.tutorialspoint.com/http/http_responses.htm">http://</a><a
href="http://www.tutorialspoint.com/http/http_responses.htm">www.tutorialspoint.com/http/http_responses.htm</a>
</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span> Common Status Codes</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>200 - Success</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>4xx - Incorrect request from client. </p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Eg: 404 is resouce not found</p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>400 is a badly formed request sent by client</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>5xx - Server error - Eg: 500 is internal server error.</p>

<h2>RESTful Services</h2>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A way of implementing web services using standard http operations</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Web services provide opertions to handle resources - Resources
can be books (eg: flipkart.com), people (eg: facebook), messages (eg: twitter)</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Http request URI identifies the resource to perform the operation
on</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>REST services can be implemented in any server technology
(python, asp.net, java, nodejs)</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>REST services can be called by any client written in any language
(java, .net, javascript)</p>

<h2>Tools to View Http Requests</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>fiddler, postman, curl</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fiddler video: <a
href="https://www.youtube.com/watch?v=gujBKFGwjd4">https://www.youtube.com/watch?v=gujBKFGwjd4</a>
</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fiddler download: <a
href="http://www.telerik.com/download/fiddler">http://</a><a
href="http://www.telerik.com/download/fiddler">www.telerik.com/download/fiddler</a>
</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Curl: Download from: <a
href="http://curl.haxx.se/latest.cgi?curl=win64-ssl-sspi">http://curl.haxx.se/latest.cgi?curl=win64-ssl-sspi</a></p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Curl tutorials: <a
href="http://curl.haxx.se/docs/httpscripting.html">http://</a><a
href="http://curl.haxx.se/docs/httpscripting.html">curl.haxx.se/docs/httpscripting.html</a></p>

<p class=MsoNormal>&nbsp;</p>

<h1>Project Setup</h1>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fiddler download: <a
href="http://www.telerik.com/download/fiddler">http://</a><a
href="http://www.telerik.com/download/fiddler">www.telerik.com/download/fiddler</a>
</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Curl: Download from: <a
href="http://curl.haxx.se/latest.cgi?curl=win64-ssl-sspi">http://curl.haxx.se/latest.cgi?curl=win64-ssl-sspi</a></p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Install nodejs</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Install jasmine-node</p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Install mysql</p>

<p class=MsoNormal>&nbsp;</p>

<h2>Try It Now</h2>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Download and start Fiddler. Try the exercises in the video: <a
href="https://www.youtube.com/watch?v=gujBKFGwjd4">https://www.youtube.com/watch?v=gujBKFGwjd4</a></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='font-family:"Arial",sans-serif'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Download and run curl. Try the exercises in the tutorial: <a
href="http://curl.haxx.se/docs/httpscripting.html">http://</a><a
href="http://curl.haxx.se/docs/httpscripting.html">curl.haxx.se/docs/httpscripting.html</a></p>

<p class=MsoNormal>&nbsp;</p>

<h1>Simple Tutorial</h1>

<p class=MsoNormal>In this tutorial, we will build a simple http server that
will echo back the incoming request. You can see the full code for this
tutorial in Tutorial.js file of the project git repo</p>

<p class=MsoNormal>First, import the required http, queryparser modules.</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=601 valign=top style='width:450.8pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>var http = require('http');</p>
  <p class=MsoNormal>var querystring = require('querystring');</p>
  <p class=MsoNormal>var PORT = 3000;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Next, create an instance of the http server and make it
listen on port 3000.</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=601 valign=top style='width:450.8pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>var PORT = 3000;</p>
  <p class=MsoNormal>var server = http.createServer(handleRequest);</p>
  <p class=MsoNormal>function handleRequest(request, response){</p>
  <p class=MsoNormal>     response.end(“Hello World”);</p>
  <p class=MsoNormal>}</p>
  <p class=MsoNormal>server.listen(PORT, function(){</p>
  <p class=MsoNormal> console.log(&quot;server listening on port &quot; +
  PORT);</p>
  <p class=MsoNormal>});</p>
  <p class=MsoNormal>&nbsp;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can run the above code by doing node tutorial.js – The
http server will listen on port 3000 and the handleRequest function will be
called when any incoming request is returned. For now, the handleRequest method
simply returns “Hello World”.</p>

<p class=MsoNormal>Now, lets expand handleRequest to echo back the incoming
request details (such as method type, url and request body). For this, we’ve to
add event listeners for the request “data” and “end” events as described <a
href="https://nodejs.org/api/stream.html#stream_class_stream_readable">here</a>.</p>

<p class=MsoNormal>We implement a listener for ‘data’ event where we add the
latest message chunk received to a string buffer. When the ‘end’ event is
received, the bodyStr variable will have the full content of the incoming http
request.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=601 valign=top style='width:450.8pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>function handleRequest(request, response){</p>
  <p class=MsoNormal> var bodyStr = &quot;&quot;;</p>
  <p class=MsoNormal> request.on('data',function(chunk){</p>
  <p class=MsoNormal>  console.log(&quot;recvd &quot; + chunk.toString())</p>
  <p class=MsoNormal>  bodyStr += chunk.toString();</p>
  <p class=MsoNormal> });</p>
  <p class=MsoNormal> request.on('end', function() {</p>
  <p class=MsoNormal>  var str = &quot;Received &quot; + request.method +
  &quot; request for &quot; + request.url + &quot; body: &quot; + bodyStr;</p>
  <p class=MsoNormal>  console.log(str);</p>
  <p class=MsoNormal>  response.end(JSON.stringify(str));</p>
  <p class=MsoNormal> });</p>
  <p class=MsoNormal>}</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can look at the final code in Tutorial.js. You can also
run the basic tests by running jasmine-node spec\tests\TutorialSpec.js</p>

<h1>Project Activities</h1>

<p class=MsoNormal>&nbsp;</p>

<h2>CalculatorHttpService</h2>

<p class=MsoNormal>In this activity, you will implement a REST service that
supports the following operations:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>GET
/calculator/sum?op1=&lt;num&gt;&amp;op2=&lt;num&gt; should return the sum of
op1 and op2 in the JSON response.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>POST
/calculator/sum where the request body is the following JSON document:
{“op1”:”num”,”op2”:”num”} and returns the sum of op1 and op2 in the response.</p>

<p class=MsoNormal>You will write your code into CalculatorHttpService.js.</p>

<h2>ContactsHttpService</h2>

<p class=MsoNormal>In this activity, you will implement a REST service to
manage contacts. The rest service will store/retrieve contacts in a mysql
database. The rest service will implement the following operations:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>GET
/contacts/id – This will read the specified contact from the mysql database and
return it in the response.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>POST
/contacts – This will accept a JSON payload, create the contact in mysql
database and return id in the response. Format of JSON request body is:
{“firstName”:””,”lastName”:””,”phone”:””}</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PUT
/contacts/id – This will update the specified contact’s details with the
details in the JSON payload.</p>

<p class=MsoNormal>You will write your code into ContactsHttpService.js</p>

<h1>References</h1>

</div>

</body>

</html>
